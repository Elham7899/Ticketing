<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="airlinecanhavemaximumof150planes" xml:space="preserve">
    <value>This airline can have a maximum of 150 planes.Count Of Planes For This AirLine :{0}</value>
  </data>
  <data name="AirplaenAirlineNotExist" xml:space="preserve">
    <value>This Airplaen Or Airline Does Not Exist!</value>
  </data>
  <data name="AirworthinessDoesNotUpdate" xml:space="preserve">
    <value>This Airworthiness Does Not Update!</value>
  </data>
  <data name="America" xml:space="preserve">
    <value>America</value>
  </data>
  <data name="AmericanairlinesonlyhaveBoeing" xml:space="preserve">
    <value>American airlines only have Boeing airplanes</value>
  </data>
  <data name="AmericanAndQatarAirwaysHaveMaximum200lanes" xml:space="preserve">
    <value>american airlines and Qatar Airways can have a maximum of 200 planes.Count Of Planes For This Airline : {0}</value>
  </data>
  <data name="CompanyDoesNotExist" xml:space="preserve">
    <value>Company Does Not Exist!</value>
  </data>
  <data name="ConectionString" xml:space="preserve">
    <value>Password=12345;Persist Security Info=True;User ID=sa;Initial Catalog=LoginPage;Data Source=.;TrustServerCertificate=Yes</value>
  </data>
  <data name="CountryDoesNotExist" xml:space="preserve">
    <value>Country Does Not Exist!</value>
  </data>
  <data name="EroupeanJapaneseHaveBoeing" xml:space="preserve">
    <value>Only European airlines and Japanese airlines can have Boeing airplanes</value>
  </data>
  <data name="Europe" xml:space="preserve">
    <value>Europe</value>
  </data>
  <data name="HomeInformationIsRequired" xml:space="preserve">
    <value>Home Information Is Required</value>
  </data>
  <data name="IncorectPassword" xml:space="preserve">
    <value>The Password Format Is Incorrect</value>
  </data>
  <data name="IncorrectEmail" xml:space="preserve">
    <value>The Email Format Is Incorrect</value>
  </data>
  <data name="InvalidAddress" xml:space="preserve">
    <value>Write The Address between 20 and 50 Characters</value>
  </data>
  <data name="InvalidDate" xml:space="preserve">
    <value>Invalid Date Of Birthday</value>
  </data>
  <data name="InvalidLocation" xml:space="preserve">
    <value>The Location Type Is Invalid</value>
  </data>
  <data name="InvalidPostalCode" xml:space="preserve">
    <value>Invalid PostalCode</value>
  </data>
  <data name="IsAlreadyExists" xml:space="preserve">
    <value>This RegistrationNumber Is Already Exists.</value>
  </data>
  <data name="Lessthan5char" xml:space="preserve">
    <value>It Should Be Less than 5 charactor</value>
  </data>
  <data name="NoCompanyForThisModelId" xml:space="preserve">
    <value>There Is No Company For This ModelID</value>
  </data>
  <data name="NoContinentForThisId" xml:space="preserve">
    <value>There Is No Continent For This ID</value>
  </data>
  <data name="PhoneNumberIsInvalid" xml:space="preserve">
    <value>PhoneNumber Is Invalid.Try In This Format : 02144444444</value>
  </data>
  <data name="RegistrationNumberNotCorrect" xml:space="preserve">
    <value>This RegistrationNumber Is Not With Correct Format</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="UnableToAddMoreThan2Information" xml:space="preserve">
    <value>Unable To Add More Than 2 Information For This User</value>
  </data>
  <data name="UserIDDoesNotExist" xml:space="preserve">
    <value>This UserID Does Not Exist In Users</value>
  </data>
  <data name="UsernameIsExist" xml:space="preserve">
    <value>This Username Is Already Exists. Please Try Another One</value>
  </data>
  <data name="UsernameMustBeMorethan5" xml:space="preserve">
    <value>The UserName Must Be More Than 5 Characters</value>
  </data>
  <data name="UserNameNotExist" xml:space="preserve">
    <value>This UserName Does Not Exist</value>
  </data>
  <data name="UsersCanNotHaveMoreThan1HomeAddress" xml:space="preserve">
    <value>Users Can Not Have More Than 1 Home Address</value>
  </data>
  <data name="WrongGender" xml:space="preserve">
    <value>WrongGender</value>
  </data>
</root>